"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5505],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=s(a),k=i,N=c["".concat(p,".").concat(k)]||c[k]||d[k]||r;return a?n.createElement(N,l(l({ref:t},m),{},{components:a})):n.createElement(N,l({ref:t},m))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5544:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),l=["components"],o={id:"dev-guide-ljm-api",title:"lib-jitsi-meet API (low level)"},p=void 0,s={unversionedId:"dev-guide/dev-guide-ljm-api",id:"dev-guide/dev-guide-ljm-api",title:"lib-jitsi-meet API (low level)",description:"You can use Jitsi Meet API to create Jitsi Meet video conferences with a custom GUI.",source:"@site/docs/dev-guide/ljm-api.md",sourceDirName:"dev-guide",slug:"/dev-guide/dev-guide-ljm-api",permalink:"/handbook/docs/dev-guide/dev-guide-ljm-api",draft:!1,editUrl:"https://github.com/jitsi/handbook/edit/master/docs/dev-guide/ljm-api.md",tags:[],version:"current",lastUpdatedAt:1715027026,formattedLastUpdatedAt:"May 6, 2024",frontMatter:{id:"dev-guide-ljm-api",title:"lib-jitsi-meet API (low level)"},sidebar:"docs",previous:{title:"IFrame API",permalink:"/handbook/docs/dev-guide/dev-guide-iframe"},next:{title:"Electron SDK",permalink:"/handbook/docs/dev-guide/dev-guide-electron-sdk"}},m={},d=[{value:"Installation",id:"installation",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Components",id:"components",level:2},{value:"Usage",id:"usage",level:2},{value:"JitsiMeetJS",id:"jitsimeetjs",level:3},{value:"JitsiConnection",id:"jitsiconnection",level:3},{value:"JitsiConference",id:"jitsiconference",level:3},{value:"JitsiTrack",id:"jitsitrack",level:3},{value:"JitsiTrackError",id:"jitsitrackerror",level:3}],c={toc:d};function k(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can use Jitsi Meet API to create Jitsi Meet video conferences with a custom GUI."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"To embed Jitsi Meet API in your application you need to add Jitsi Meet API library"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://code.jquery.com/jquery-3.5.1.min.js"><\/script>\n<script src="https://meet.jit.si/libs/lib-jitsi-meet.min.js"><\/script>\n')),(0,r.kt)("p",null,"Now you can access Jitsi Meet API through the ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS")," global object."),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The first thing you must do in order to use Jitsi Meet API is to initialize ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiMeetJS")," object:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"JitsiMeetJS.init();\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Then you must create the connection object:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"var connection = new JitsiMeetJS.JitsiConnection(null, null, options);\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Now we can attach some listeners to the connection object and establish the server connection:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"connection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, onConnectionSuccess);\nconnection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_FAILED, onConnectionFailed);\nconnection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED, disconnect);\n\nconnection.connect();\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"After you receive the ",(0,r.kt)("inlineCode",{parentName:"li"},"CONNECTION_ESTABLISHED")," event you are to create the ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiConference")," object and\nalso you may want to attach listeners for conference events (we are going to add handlers for remote track, conference joined, etc. ):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'room = connection.initJitsiConference("conference1", confOptions);\nroom.on(JitsiMeetJS.events.conference.TRACK_ADDED, onRemoteTrack);\nroom.on(JitsiMeetJS.events.conference.CONFERENCE_JOINED, onConferenceJoined);\n')),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"You also may want to get your local tracks from the camera and microphone:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"JitsiMeetJS.createLocalTracks().then(onLocalTracks);\n")),(0,r.kt)("p",null,"NOTE: Adding listeners and creating local streams are not mandatory steps."),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"Then you are ready to create / join a conference :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"room.join();\n")),(0,r.kt)("p",null,"After that step you are in the conference. Now you can continue with adding some code that will handle the events and manage the conference."),(0,r.kt)("h2",{id:"components"},"Components"),(0,r.kt)("p",null,"Jitsi Meet API has the following components:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"JitsiMeetJS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"JitsiConnection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"JitsiConference")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"JitsiTrack")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"JitsiTrackError"))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("admonition",{title:"NOTE",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"JaaS customers, please follow ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jitsi/ljm-jaas-example"},"this example")," or check out the ",(0,r.kt)("a",{parentName:"p",href:"https://jitsi.github.io/ljm-jaas-example"},"live demo"),".")),(0,r.kt)("h3",{id:"jitsimeetjs"},"JitsiMeetJS"),(0,r.kt)("p",null,"You can access the following methods and objects through ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS")," object."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.init(options)")," - this method initialized Jitsi Meet API.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," parameter is JS object with the following properties:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"- `useIPv6` - boolean property\n- `disableSimulcast` - boolean property. Enables/disables simulcast.\n- `enableWindowOnErrorHandler` - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n- `disableThirdPartyRequests` - if true - callstats will be disabled and the callstats API won't be included.\n- `enableAnalyticsLogging` - boolean property (default false). Enables/disables analytics logging.\n- `externalStorage` - Object that implements the Storage interface. If specified this object will be used for storing data instead of `localStorage`.\n- `callStatsCustomScriptUrl` - (optional) custom url to access callstats client script\n- `useTurnUdp` - boolean property (default false). Enables use of turn over udp for jvb. It is disabled because not very useful (if the client can use udp, it likely can connect to jvb directly over udp too; but it can be useful to still enable udp turn when an udp turn is known to be whitelisted on a network)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.JitsiConnection")," - the ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiConnection")," constructor. You can use that to create new server connection.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.setLogLevel")," - changes the log level for the library. For example to have only error messages you should do:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.ERROR);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.createLocalTracks(options)")," - Creates the media tracks and returns them through ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," object. If rejected, passes ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiTrackError")," instance to catch block."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options")," - JS object with configuration options for the local media tracks. You can change the following properties there:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"devices"),' - array with the devices - "desktop", "video" and "audio" that will be passed to GUM. If that property is not set GUM will try to get all available devices.'),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"resolution")," - the prefered resolution for the local video."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"constraints")," - the prefered encoding properties for the created track (replaces 'resolution' in newer releases of browsers)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"cameraDeviceId")," - the deviceID for the video device that is going to be used"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"micDeviceId")," - the deviceID for the audio device that is going to be used"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"minFps")," - the minimum frame rate for the video stream (passed to GUM)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"maxFps")," - the maximum frame rate for the video stream (passed to GUM)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"desktopSharingSourceDevice")," - The device id or label for a video input source that should be used for screensharing."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"facingMode")," - facing mode for a camera (possible values - 'user', 'environment')"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"firePermissionPromptIsShownEvent")," - optional boolean parameter. If set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN")," will be fired when browser shows gUM permission prompt."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"fireSlowPromiseEvent")," - optional boolean parameter. If set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT")," will be fired when browser takes too long to resolve the gUM promise. This event is mutual exclusive with the above ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN")," event"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"firePermissionPromptIsShownEvent")," - ",(0,r.kt)("strong",{parentName:"li"},"DEPRECATED"),". Use options.firePermissionPromptIsShownEvent instead"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor)")," - Creates a TrackVADEmitter service that connects an audio track to a VAD (voice activity detection) processor in order to obtain VAD scores for individual PCM audio samples."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"localAudioDeviceId")," - The target local audio device."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sampleRate")," - Sample rate at which the emitter will operate. Possible values  256, 512, 1024, 4096, 8192, 16384. Passing other values will default to closes neighbor, i.e. Providing a value of 4096 means that the emitter will process bundles of 4096 PCM samples at a time, higher values mean longer calls, lowers values mean more calls but shorter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"vadProcessor")," - VAD Processors that does the actual compute on a PCM sample.The processor needs to implement the following functions:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getSampleLength()")," - Returns the sample size accepted by calculateAudioFrameVAD."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getRequiredPCMFrequency()")," - Returns the PCM frequency at which the processor operates .i.e. (16KHz, 44.1 KHz etc.)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"calculateAudioFrameVAD(pcmSample)")," - Process a 32 float pcm sample of getSampleLength size."))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.enumerateDevices(callback)")," - ",(0,r.kt)("strong",{parentName:"p"},"DEPRECATED"),". Use ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.mediaDevices.enumerateDevices(callback)")," instead.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.isDeviceChangeAvailable(deviceType)")," - ",(0,r.kt)("strong",{parentName:"p"},"DEPRECATED"),". Use ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.mediaDevices.isDeviceChangeAvailable(deviceType)")," instead.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.isDesktopSharingEnabled()")," - returns true if desktop sharing is supported and false otherwise. NOTE: that method can be used after ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.init(options)")," is completed otherwise the result will be always null.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.getActiveAudioDevice()")," - goes through all audio devices on the system and returns information about one that is active, i.e. has audio signal. Returns a Promise resolving to an Object with the following structure:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deviceId")," - string containing the device ID of the audio track found as active."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deviceLabel")," - string containing the label of the audio device."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.getGlobalOnErrorHandler()")," - returns function that can be used to be attached to window.onerror and if options.enableWindowOnErrorHandler is enabled returns the function used by the lib. (function(message, source, lineno, colno, error)).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.mediaDevices")," - JS object that contains methods for interaction with media devices. Following methods are available:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isDeviceListAvailable()")," - returns true if retrieving the device list is supported and false - otherwise"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isDeviceChangeAvailable(deviceType)")," - returns true if changing the input (camera / microphone) or output (audio) device is supported and false if not. ",(0,r.kt)("inlineCode",{parentName:"li"},"deviceType")," is a type of device to change. Undefined or 'input' stands for input devices, 'output' - for audio output devices."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enumerateDevices(callback)")," - returns list of the available devices as a parameter to the callback function. Every device is a MediaDeviceInfo object with the following properties:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"label")," - the name of the device"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kind"),' - "audioinput", "videoinput" or "audiooutput"'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deviceId")," - the id of the device"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"groupId")," - group identifier, two devices have the same group identifier if they belong to the same physical device; for example a monitor with both a built-in camera and microphone"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setAudioOutputDevice(deviceId)")," - sets current audio output device. ",(0,r.kt)("inlineCode",{parentName:"li"},"deviceId")," - id of 'audiooutput' device from ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiMeetJS.enumerateDevices()"),", '' is for default device."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getAudioOutputDevice()")," - returns currently used audio output device id, '' stands for default device."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isDevicePermissionGranted(type)")," - returns a Promise which resolves to true if user granted permission to media devices. ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," - 'audio', 'video' or ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"),". In case of ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined")," will check if both audio and video permissions were granted."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"addEventListener(event, handler)")," - attaches an event handler."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"removeEventListener(event, handler)")," - removes an event handler."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.events")," - JS object that contains all events used by the API. You will need that JS object when you try to subscribe for connection or conference events.\nWe have two event types - connection and conference. You can access the events with the following code ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.events.<event_type>.<event_name>"),".\nFor example if you want to use the conference event that is fired when somebody leave conference you can use the following code - ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.events.conference.USER_LEFT"),".\nWe support the following events:"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"conference")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TRACK_ADDED")," - stream received. (parameters - JitsiTrack)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TRACK_REMOVED")," - stream removed. (parameters - JitsiTrack)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TRACK_MUTE_CHANGED")," - JitsiTrack was muted or unmuted. (parameters - JitsiTrack)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TRACK_AUDIO_LEVEL_CHANGED")," - audio level of JitsiTrack has changed. (parameters - participantId(string), audioLevel(number))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DOMINANT_SPEAKER_CHANGED")," - the dominant speaker is changed. (parameters - id(string), previousSpeakers(",(0,r.kt)("inlineCode",{parentName:"li"},"Array<string>"),"))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"USER_JOINED")," - new user joined a conference. (parameters - id(string), user(JitsiParticipant))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"USER_LEFT")," - a participant left conference. (parameters - id(string), user(JitsiParticipant))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MESSAGE_RECEIVED")," - new text message received. (parameters - id(string), text(string), ts(number))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DISPLAY_NAME_CHANGED")," - user has changed his display name. (parameters - id(string), displayName(string))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SUBJECT_CHANGED")," - notifies that subject of the conference has changed (parameters - subject(string))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LAST_N_ENDPOINTS_CHANGED")," - last n set was changed (parameters - leavingEndpointIds(array) ids of users leaving lastN, enteringEndpointIds(array) ids of users entering lastN)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONFERENCE_JOINED")," - notifies the local user that he joined the conference successfully. (no parameters)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONFERENCE_LEFT")," - notifies the local user that he left the conference successfully. (no parameters)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONFERENCE_UNIQUE_ID_SET")," - notifies the local user that the unique id for a meeting has been set. (parameters - meetingId(string))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DTMF_SUPPORT_CHANGED")," - notifies if at least one user supports DTMF. (parameters - supports(boolean))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"USER_ROLE_CHANGED")," - notifies that role of some user changed. (parameters - id(string), role(string))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"USER_STATUS_CHANGED")," - notifies that status of some user changed. (parameters - id(string), status(string))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONFERENCE_FAILED")," - notifies that user failed to join the conference. (parameters - errorCode(JitsiMeetJS.errors.conference))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONFERENCE_ERROR")," - notifies that error occurred. (parameters - errorCode(JitsiMeetJS.errors.conference))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"KICKED")," - notifies that user has been kicked from the conference. (parameters - actorParticipant(JitsiParticipant), reason(string))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PARTICIPANT_KICKED")," - notifies that participant has been kicked from the conference by another participant. (parameters - actorParticipant(JitsiParticipant), kickedParticipant(JitsiParticipant), reason(string))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"START_MUTED_POLICY_CHANGED")," - notifies that all new participants will join with muted audio/video stream (parameters - JS object with 2 properties - audio(boolean), video(boolean))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"STARTED_MUTED")," - notifies that the local user has started muted"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONNECTION_STATS")," - ",(0,r.kt)("strong",{parentName:"li"},"DEPRECATED"),". Use ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiMeetJS.events.connectionQuality.LOCAL_STATS_UPDATED")," instead."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BEFORE_STATISTICS_DISPOSED")," - fired just before the statistics module is disposed and it's the last chance to submit some logs to the statistics service, before it gets disconnected"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AUTH_STATUS_CHANGED")," - notifies that authentication is enabled or disabled, or local user authenticated (logged in). (parameters - isAuthEnabled(boolean), authIdentity(string))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ENDPOINT_MESSAGE_RECEIVED")," - notifies that a new message\nfrom another participant is received on a data channel."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TALK_WHILE_MUTED")," - notifies that a local user is talking while having the microphone muted."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NO_AUDIO_INPUT")," - notifies that the current selected input device has no signal."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AUDIO_INPUT_STATE_CHANGE")," - notifies that the current conference audio input switched between audio input states i.e. with or without audio input."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOISY_MIC")," - notifies that the current microphone used by the conference is noisy."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PARTICIPANT_PROPERTY_CHANGED")," - notifies that user has changed his custom participant property. (parameters - user(JitsiParticipant), propertyKey(string), oldPropertyValue(string), propertyValue(string))"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"connection")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONNECTION_FAILED")," - indicates that the server connection failed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONNECTION_ESTABLISHED")," - indicates that we have successfully established server connection."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONNECTION_DISCONNECTED")," - indicates that we are disconnected."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WRONG_STATE")," - indicates that the user has performed action that can't be executed because the connection is in wrong state."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"detection")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"VAD_SCORE_PUBLISHED")," - event generated by a TackVADEmitter when it computed a VAD score for an audio PCM sample."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"track")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LOCAL_TRACK_STOPPED")," - indicates that a local track was stopped. This\nevent can be fired when ",(0,r.kt)("inlineCode",{parentName:"li"},"dispose()")," method is called or for other reasons."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TRACK_AUDIO_OUTPUT_CHANGED")," - indicates that audio output device for track was changed (parameters - deviceId (string) - new audio output device ID)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TRACK_VIDEOTYPE_CHANGED"),' -  indicates that the video type("camera" or "desktop") of the track was changed'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"mediaDevices")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DEVICE_LIST_CHANGED")," - indicates that list of currently connected devices has changed (parameters - devices(MediaDeviceInfo[]))."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PERMISSION_PROMPT_IS_SHOWN")," - Indicates that the environment is currently showing permission prompt to access camera and/or microphone (parameters - environmentType ('chrome'|'opera'|'firefox'|'safari'|'nwjs'|'react-native'|'android')."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"connectionQuality")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LOCAL_STATS_UPDATED")," - New local connection statistics are received. (parameters - stats(object))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REMOTE_STATS_UPDATED")," - New remote connection statistics are received. (parameters - id(string), stats(object))"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.errors")," - JS object that contains all errors used by the API. You can use that object to check the reported errors from the API\nWe have three error types - connection, conference and track. You can access the events with the following code ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.errors.<error_type>.<error_name>"),".\nFor example if you want to use the conference event that is fired when somebody leave conference you can use the following code - ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.errors.conference.PASSWORD_REQUIRED"),".\nWe support the following errors:"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"conference"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONNECTION_ERROR")," - the connection with the conference is lost."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SETUP_FAILED")," - conference setup failed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AUTHENTICATION_REQUIRED")," - user must be authenticated to create this conference"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PASSWORD_REQUIRED")," - that error can be passed when the connection to the conference failed. You should try to join the conference with password."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PASSWORD_NOT_SUPPORTED")," - indicates that conference cannot be locked"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"VIDEOBRIDGE_NOT_AVAILABLE")," - video bridge issues."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RESERVATION_ERROR")," - error in reservation system"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GRACEFUL_SHUTDOWN")," - graceful shutdown"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"JINGLE_FATAL_ERROR")," - error in jingle (the orriginal error is attached as parameter.)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONFERENCE_DESTROYED")," - conference has been destroyed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CHAT_ERROR")," - chat error happened"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FOCUS_DISCONNECTED")," - focus error happened"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FOCUS_DISCONNECTED")," - focus left the conference"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONFERENCE_MAX_USERS")," - The maximum users limit has been reached"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"connection"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONNECTION_DROPPED_ERROR")," - indicates that the connection was dropped with an error which was most likely caused by some networking issues."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PASSWORD_REQUIRED")," - passed when the connection to the server failed. You should try to authenticate with password."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SERVER_ERROR")," - indicates too many 5XX errors were received from the server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OTHER_ERROR")," - all other errors"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"track"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GENERAL")," - generic getUserMedia-related error."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UNSUPPORTED_RESOLUTION")," - getUserMedia-related error, indicates that requested video resolution is not supported by camera."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PERMISSION_DENIED")," - getUserMedia-related error, indicates that user denied permission to share requested device."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NOT_FOUND")," - getUserMedia-related error, indicates that requested device was not found."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CONSTRAINT_FAILED")," - getUserMedia-related error, indicates that some of requested constraints in getUserMedia call were not satisfied."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TRACK_IS_DISPOSED")," - an error which indicates that track has been already disposed and cannot be longer used."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TRACK_NO_STREAM_FOUND")," - an error which indicates that track has no MediaStream associated."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SCREENSHARING_GENERIC_ERROR")," - generic error for screensharing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SCREENSHARING_USER_CANCELED")," - an error which indicates that user canceled screen sharing window selection dialog."))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.errorTypes")," - constructors for Error instances that can be produced by library. Are useful for checks like ",(0,r.kt)("inlineCode",{parentName:"p"},"error instanceof JitsiMeetJS.errorTypes.JitsiTrackError"),". Following Errors are available:"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"JitsiTrackError")," - Error that happened to a JitsiTrack."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.logLevels")," - object with the log levels:"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"TRACE")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"DEBUG")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"INFO")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"LOG")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"WARN")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"ERROR"))))),(0,r.kt)("h3",{id:"jitsiconnection"},"JitsiConnection"),(0,r.kt)("p",null,"This objects represents the server connection. You can create new ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiConnection")," object with the constructor ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiMeetJS.JitsiConnection"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiConnection")," has the following methods:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"JitsiConnection(appID, token, options)")," - constructor. Creates the conference object."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"appID")," - identification for the provider of Jitsi Meet video conferencing services. ",(0,r.kt)("strong",{parentName:"li"},"NOTE: not implemented yet. You can safely pass ",(0,r.kt)("inlineCode",{parentName:"strong"},"null"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token")," - secret generated by the provider of Jitsi Meet video conferencing services. The token will be send to the provider from the Jitsi Meet server deployment for authorization of the current client."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options")," - JS object with configuration options for the server connection. You can change the following properties there:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"serviceUrl")," - XMPP service URL. For  example 'wss://server.com/xmpp-websocket' for Websocket or '//server.com/http-bind' for BOSH."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"bosh")," - DEPRECATED, use serviceUrl to specify either BOSH or Websocket URL."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"hosts")," - JS Object",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"domain")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"muc")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"anonymousdomain")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"enableLipSync")," - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"clientNode")," - The name of client node advertised in XEP-0115 'c' stanza"),(0,r.kt)("li",{parentName:"ol"},"xmppPing - (optional) JS Object - xmpp ping options",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"interval")," - how often to send ping requests, default: 10000 (10 seconds)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timeout")," - the time to wait for ping responses, default: 5000 (5 seconds)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"threshold")," - how many ping failures will be tolerated before the connection is killed, default: 2"))),(0,r.kt)("li",{parentName:"ol"},"websocketKeepAlive - (optional) Setting the interval of websocket keepalive GET requests. By default, the value is 1 minute(which means a minute + a minute of jitter).\nUsed for certain deployments where a stick table entry needs to be kept alive we use those GET requests."),(0,r.kt)("li",{parentName:"ol"},"websocketKeepAliveUrl - (optional) Specific Url to use for the websocket keepalive GET requests."))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"connect(options)")," - establish server connection"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options")," - JS Object with ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"password")," properties."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"disconnect()")," - destroys the server connection")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"initJitsiConference(name, options)")," - creates new ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiConference")," object."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"name")," - the name of the conference")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"options")," - JS object with configuration options for the conference. You can change the following properties there:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"audioQuality")," - Audio quality related settings."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stereo")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"opusMaxAverageBitrate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enableOpusDtx")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"bridgeChannel")," - Settings related to the bridge channel."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ignoreDomain")," - If the backend advertises multiple colibri websockets, this options allows to filter some of them out based on the domain name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"preferSctp")," - Enables the use of the SCTP data channel for bridge channel."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"callStatsID")," - callstats credentials")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"callStatsSecret")," - callstats credentials")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"channelLastN"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"deploymentInfo")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"shard")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"userRegion")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"disableAudioLevels")," - boolean property. Enables/disables audio levels.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"disableInitialGUM"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"disableRtx")," - boolean property (default to false).  Enables/disable the use of RTX.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"disableSimulcast")," - Enable / disable simulcast support.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"e2eping")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pingInterval")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"enableForcedReload"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"enableIceRestart"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"enableNoAudioDetection")," - boolean property.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"enableOpusRed"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"enableTalkWhileMuted")," - boolean property.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"enableNoisyMicDetection")," - boolean property.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"enableRemb")," - boolean property. Enables/disables REMB support, enabled by default.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"enableTcc")," - enables/disabled TCC for bandwidth estimation, enabled by default.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"focusUserJid")," - The real JID of focus participant - can be overridden here")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ignoreStartMuted")," - ignores start muted events coming from jicofo.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"p2p")," - Peer to peer related options"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enabled")," - enables or disable peer-to-peer connection, if disabled all media will be routed through the Jitsi Videobridge."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"codecPreferenceOrder")," - Provides a way to set the codec preference on desktop based endpoints."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mobileCodecPreferenceOrder")," - Provides a way to set the codec preference on mobile devices, both on RN and mobile browser based endpoints."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stunServers")," - list of STUN servers e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"{ urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"backToP2PDelay")," - a delay given in seconds, before the conference switches back to P2P, after the 3rd participant has left the room."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"recordingType")," - the type of recording to be used")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"rttMonitor")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enabled")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"initialDelay")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getStatsInterval")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"analyticsInterval")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stunServers")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"startAudioOnly"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"startAudioMuted"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"startWithAudioMuted"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"startVideoMuted"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"startWithVideoMuted"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"startSilent")," - enables silent mode, will mark audio as inactive will not send/receive audio")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"videoQuality")," Video quality settings related to the bridge connection."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"codecPreferenceOrder")," - Provides a way to set the codec preference on desktop based endpoints."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mobileCodecPreferenceOrder")," - Provides a way to set the codec preference on mobile devices, both on RN and mobile browser based endpoints."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maxBitratesVideo")," - Provides a way to specify the bitrates for different codecs."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"testing")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"NOTE: if 4 and 5 are set the library is going to send events to callstats. Otherwise the callstats integration will be disabled."))))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"addEventListener(event, listener)")," - Subscribes the passed listener to the event."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event")," - one of the events from ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiMeetJS.events.connection")," object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"listener")," - handler for the event."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"removeEventListener(event, listener)")," - Removes event listener."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event")," - the event"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"listener")," - the listener that will be removed."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"addFeature")," - Adds new feature to the list of supported features for the local participant"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"feature")," - string, the name of the feature"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"submit")," - boolean, default false, if true - the new list of features will be immediately submitted to the others."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"removeFeature")," - Removes a feature from the list of supported features for the local participant"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"feature")," - string, the name of the feature"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"submit")," - boolean, default false, if true - the new list of features will be immediately submitted to the others.")))),(0,r.kt)("h3",{id:"jitsiconference"},"JitsiConference"),(0,r.kt)("p",null,"The object represents a conference. We have the following methods to control the conference:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"join(password)")," - Joins the conference"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"password - string of the password. This parameter is not mandatory."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"leave()")," - leaves the conference. Returns Promise.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"myUserId()")," - get local user ID.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getLocalTracks()")," - Returns array with JitsiTrack objects for the local streams.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"addEventListener(event, listener)")," - Subscribes the passed listener to the event."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event")," - one of the events from ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiMeetJS.events.conference")," object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"listener")," - handler for the event."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"removeEventListener(event, listener)")," - Removes event listener."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event")," - the event"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"listener")," - the listener that will be removed."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"on(event, listener)")," - alias for addEventListener")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"off(event, listener)")," - alias for removeEventListener")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sendTextMessage(text)")," - sends the given string to other participants in the conference.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setDisplayName(name)")," - changes the display name of the local participant."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - the new display name."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sendCommand(name, values)")," - sends user defined system command to the other participants"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - the name of the command."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"values")," - JS object. The object has the following structure:")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"            {\n\n\n                value: the_value_of_the_command,\n\n\n                attributes: {}, // map with keys the name of the attribute and values - the values of the attributes.\n\n\n                children: [] // array with JS object with the same structure.\n            }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NOTE: When you use that method the passed object will be added in every system message that is sent to the other participants. It might be sent more than once.\n")),(0,r.kt)("ol",{start:12},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"sendCommandOnce(name, values)")," - Sends only one time a user defined system command to the other participants")),(0,r.kt)("ol",{start:13},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"removeCommand(name)")," - removes a command for the list of the commands that are sent to the ther participants"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - the name of the command"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"addCommandListener(command, handler)")," - adds listener"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"command")," - string for the name of the command"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"handler(values)")," - the listener that will be called when a command is received from another participant."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"removeCommandListener(command)")," - removes the listeners for the specified command"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"command")," - the name of the command"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"addTrack(track)")," - Adds ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiLocalTrack")," object to the conference. Throws an error if adding second video stream of the same videoType. ",(0,r.kt)("inlineCode",{parentName:"p"},"camera")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"desktop")," are considered as two separate video sources. Therefore, when adding a video source (camera or desktop) for the first time to the conference, ",(0,r.kt)("inlineCode",{parentName:"p"},"addTack")," needs to be called and after that only ",(0,r.kt)("inlineCode",{parentName:"p"},"replaceTrack")," needs to be used to replace the existing track with another track of the same video type or for removing it from the conference. Returns a promise."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"track")," - the ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiLocalTrack")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"removeTrack(track)")," - Removes ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiLocalTrack")," object to the conference. Returns Promise. This does not fire ",(0,r.kt)("inlineCode",{parentName:"p"},"TRACK_REMOVED")," event anymore on the remote end. The same SSRC will be re-used when another track of the same kind is added back to the conference to keep signaling messages to a minimum."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"track")," - the ",(0,r.kt)("inlineCode",{parentName:"li"},"JitsiLocalTrack")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"isDTMFSupported()")," - Check if at least one user supports DTMF.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getRole()"),' - returns string with the local user role ("moderator" or "none")')),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"isModerator()"),' - checks if local user has "moderator" role')),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"lock(password)")," - set password for the conference; returns Promise"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"password")," - string password")),(0,r.kt)("p",{parentName:"li"},"Note: available only for moderator")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"unlock()")," - unset conference password; returns Promise"),(0,r.kt)("p",{parentName:"li"},"Note: available only for moderator")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"kickParticipant(id, reason)")," - Kick participant from the conference"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id")," - string participant id"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reason")," - (optional) string, default 'You have been kicked.' - reason of the participant to kick"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setStartMutedPolicy(policy)")," - make all new participants join with muted audio/video"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"policy")," - JS object with following properties",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"audio")," - boolean if audio stream should be muted"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"video")," - boolean if video stream should be muted")))),(0,r.kt)("p",{parentName:"li"},"Note: available only for moderator")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getStartMutedPolicy()")," - returns the current policy with JS object:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"policy")," - JS object with following properties",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"audio")," - boolean if audio stream should be muted"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"video")," - boolean if video stream should be muted"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"isStartAudioMuted()")," - check if audio is muted on join")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"isStartVideoMuted()")," - check if video is muted on join")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sendFeedback(overallFeedback, detailedFeedback)")," - Sends the given feedback through CallStats if enabled."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"overallFeedback")," - an integer between 1 and 5 indicating the user feedback"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"detailedFeedback")," - detailed feedback from the user. Not yet used"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setSubject(subject)")," - change subject of the conference"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subject")," - string new subject")),(0,r.kt)("p",{parentName:"li"},"Note: available only for moderator")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sendEndpointMessage(to, payload)")," - Sends message via the data channels."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"to"),' - the id of the endpoint that should receive the message. If "" the message will be sent to all participants.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - JSON object - the payload of the message.")))),(0,r.kt)("p",null,"Throws NetworkError or InvalidStateError or Error if the operation fails."),(0,r.kt)("ol",{start:31},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"sendEndpointStatsMessage(payload)")," - Sends a ",(0,r.kt)("inlineCode",{parentName:"li"},"EndpointStats")," Colibri message on the bridge channel. This should be used instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"broadcastEndpointMessage")," for relaying local stats to all the remote endpoints.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - JSON object - the payload of the message.")))),(0,r.kt)("p",null,"Throws NetworkError, InvalidStateError or Error if the operation fails."),(0,r.kt)("ol",{start:32},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"broadcastEndpointMessage(payload)")," - Sends broadcast message via the datachannels.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - JSON object - the payload of the message.")))),(0,r.kt)("p",null,"Throws NetworkError or InvalidStateError or Error if the operation fails."),(0,r.kt)("ol",{start:33},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"replaceTrack")," - replaces the track currently being used as the sender's source with a new MediaStreamTrack. The new track must be of the same media kind (audio, video, etc) and switching the track should not require negotiation. ",(0,r.kt)("inlineCode",{parentName:"li"},"replaceTrack(oldTrack, newTrack)"))),(0,r.kt)("p",null,"Throws NetworkError or InvalidStateError or Error if the operation fails."),(0,r.kt)("ol",{start:34},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setReceiverConstraints")," - set the constraints for the video that is requested from the bridge. This single message should be used in lieu of ",(0,r.kt)("inlineCode",{parentName:"p"},"setLastN"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"setReceiverVideoConstraint")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"selectParticipants")," methods. These constraints are applicable to bridge connection only. More information about the signaling message format and how the Jitsi Videobridge allocates bandwidth can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#new-message-format"},"here"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"videoConstraints")," - Object that specifies the constraints in the following format.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n   'lastN': 20, // Number of videos requested from the bridge.\n   'selectedSources': ['A', 'B', 'C'], // The source names of the video tracks that are prioritized first.\n   'onStageSources': ['A'], // The source names of the video tracks that are prioritized up to a higher resolution.\n   'defaultConstraints': { 'maxHeight': 180 }, // Default resolution requested for all endpoints.\n   'constraints': { // Source specific resolution.\n       'A': { 'maxHeight': 720 }\n   }\n}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setSenderVideoConstraint(resolution)")," - set the desired resolution to send to JVB or the peer (180, 360, 720).")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"isHidden"),' - checks if local user has joined as a "hidden" user. This is a specialized role used for integrations.')),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setLocalParticipantProperty(propertyKey, propertyValue)"),' - used to set a custom propery to the local participant("fullName": "Full Name", favoriteColor: "red", "userId": 234). Also this can be used to modify an already set custom property.'),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"propertyKey")," - string - custom property name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"propertyValue")," - string - custom property value"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getParticipants()")," - Retrieves an array of all participants in this conference.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"revokeOwner(participantId)")," -  Revokes owner's rights to the participant. The particiapnt that invokes the function should have same or more rights than the targeted participant. This rights check is done at the XMPP server level."))),(0,r.kt)("h3",{id:"jitsitrack"},"JitsiTrack"),(0,r.kt)("p",null,"The object represents single track - video or audio. They can be remote tracks ( from the other participants in the call) or local tracks (from the devices of the local participant).\nWe have the following methods for controling the tracks:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getType()"),' - returns string with the type of the track( "video" for the video tracks and "audio" for the audio tracks)')),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"mute()")," - mutes the track. Returns Promise."),(0,r.kt)("p",{parentName:"li"},"Note: This method is implemented only for the local tracks.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"unmute()")," - unmutes the track. Returns Promise."),(0,r.kt)("p",{parentName:"li"},"Note: This method is implemented only for the local tracks.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"isMuted()")," - check if track is muted")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"attach(container)")," - attaches the track to the given container.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"detach(container)")," - removes the track from the container.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"dispose()")," - disposes the track. If the track is added to a conference the track will be removed. Returns Promise."),(0,r.kt)("p",{parentName:"li"},"Note: This method is implemented only for the local tracks.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getId()")," - returns unique string for the track.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getParticipantId()")," - returns id(string) of the track owner"),(0,r.kt)("p",{parentName:"li"},"Note: This method is implemented only for the remote tracks.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getSourceName()")," - returns the source name of the track.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setAudioOutput(audioOutputDeviceId)")," - sets new audio output device for track's DOM elements. Video tracks are ignored.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getDeviceId()")," - returns device ID associated with track (for local tracks only)")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"isEnded()")," - returns true if track is ended")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"setEffect(effect)")," - Applies the effect by swapping out the existing MediaStream on the JitsiTrack with the new"),(0,r.kt)("p",{parentName:"li"},'MediaStream which has the desired effect. "undefined" is passed to this function for removing the effect and for'),(0,r.kt)("p",{parentName:"li"},"restoring the original MediaStream on the ",(0,r.kt)("inlineCode",{parentName:"p"},"JitsiTrack"),"."),(0,r.kt)("p",{parentName:"li"},"The following methods have to be defined for the effect instance."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"startEffect()")," - Starts the effect and returns a new MediaStream that is to be swapped with the existing one."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"stopEffect()")," - Stops the effect."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"isEnabled()")," - Checks if the local track supports the effect."),(0,r.kt)("p",{parentName:"li"},"Note: This method is implemented only for the local tracks."))),(0,r.kt)("h3",{id:"jitsitrackerror"},"JitsiTrackError"),(0,r.kt)("p",null,"The object represents error that happened to a JitsiTrack. Is inherited from JavaScript base ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," object,\nso ",(0,r.kt)("inlineCode",{parentName:"p"},'"name"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"message"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'"stack"')," properties are available. For GUM-related errors,\nexposes additional ",(0,r.kt)("inlineCode",{parentName:"p"},'"gum"')," property, which is an object with following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"error")," - original GUM error"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"constraints")," - GUM constraints object used for the call"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"devices"),' - array of devices requested in GUM call (possible values - "audio", "video", "screen", "desktop", "audiooutput")')))}k.isMDXComponent=!0}}]);