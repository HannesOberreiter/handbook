"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6997],{5680:(e,n,i)=>{i.d(n,{xA:()=>d,yg:()=>m});var t=i(6540);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function o(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=t.createContext({}),p=function(e){var n=t.useContext(l),i=n;return e&&(i="function"==typeof e?e(n):o(o({},n),e)),i},d=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(i),u=a,m=c["".concat(l,".").concat(u)]||c[u]||g[u]||r;return i?t.createElement(m,o(o({ref:n},d),{},{components:i})):t.createElement(m,o({ref:n},d))}));function m(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=i[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,i)}u.displayName="MDXCreateElement"},1559:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var t=i(8168),a=i(8587),r=(i(6540),i(5680)),o=["components"],s={id:"dev-guide-react-native-sdk",title:"React Native SDK"},l=void 0,p={unversionedId:"dev-guide/dev-guide-react-native-sdk",id:"dev-guide/dev-guide-react-native-sdk",title:"React Native SDK",description:"The Jitsi React Native SDK provides the same user experience as the Jitsi Meet app,",source:"@site/docs/dev-guide/react-native-sdk.md",sourceDirName:"dev-guide",slug:"/dev-guide/dev-guide-react-native-sdk",permalink:"/handbook/docs/dev-guide/dev-guide-react-native-sdk",draft:!1,editUrl:"https://github.com/jitsi/handbook/edit/master/docs/dev-guide/react-native-sdk.md",tags:[],version:"current",lastUpdatedAt:1725344025,formattedLastUpdatedAt:"Sep 3, 2024",frontMatter:{id:"dev-guide-react-native-sdk",title:"React Native SDK"},sidebar:"docs",previous:{title:"iOS SDK",permalink:"/handbook/docs/dev-guide/dev-guide-ios-sdk"},next:{title:"Flutter SDK",permalink:"/handbook/docs/dev-guide/dev-guide-flutter-sdk"}},d={},c=[{value:"Sample application using the React Native SDK",id:"sample-application-using-the-react-native-sdk",level:2},{value:"Usage",id:"usage",level:2},{value:"Android",id:"android",level:3},{value:"Permissions",id:"permissions",level:4},{value:"Services",id:"services",level:4},{value:"API",id:"api",level:4},{value:"iOS",id:"ios",level:3},{value:"Permissions",id:"permissions-1",level:4},{value:"Build Phases",id:"build-phases",level:4},{value:"Run Script Phases",id:"run-script-phases",level:5},{value:"JitsiMeeting props",id:"jitsimeeting-props",level:2},{value:"config",id:"config",level:3},{value:"flags",id:"flags",level:3},{value:"eventListeners",id:"eventlisteners",level:3},{value:"room",id:"room",level:3},{value:"serverURL",id:"serverurl",level:3},{value:"style",id:"style",level:3},{value:"token",id:"token",level:3},{value:"userInfo",id:"userinfo",level:3}],g={toc:c},u="wrapper";function m(e){var n=e.components,i=(0,a.A)(e,o);return(0,r.yg)(u,(0,t.A)({},g,i,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"The Jitsi React Native SDK provides the same user experience as the Jitsi Meet app,\nin a customizable way which you can embed in your React Native apps."),(0,r.yg)("h2",{id:"sample-application-using-the-react-native-sdk"},"Sample application using the React Native SDK"),(0,r.yg)("p",null,"If you want to see how easy integrating the Jitsi React Native SDK into a React Native application is, take a look at the",(0,r.yg)("br",null),"\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/jitsi/jitsi-meet-sdk-samples#react-native"},"sample applications repository"),"."),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("p",null,"While this is a published library, you can ",(0,r.yg)("inlineCode",{parentName:"p"},"npm i @jitsi/react-native-sdk"),".",(0,r.yg)("br",null),"\nDependency conflicts may occur between RNSDK and your app. ",(0,r.yg)("br",null),"If that is the case, please run ",(0,r.yg)("inlineCode",{parentName:"p"},"npm i @jitsi/react-native-sdk --force"),".",(0,r.yg)("br",null),"\nTo check if some dependencies need to be added, please run the following script ",(0,r.yg)("inlineCode",{parentName:"p"},"node node_modules/@jitsi/react-native-sdk/update_dependencies.js"),".",(0,r.yg)("br",null),"\nThis will sync all of our peer dependencies with your dependencies. ",(0,r.yg)("br",null),"\nNext you will need to do ",(0,r.yg)("inlineCode",{parentName:"p"},"npm install"),"."),(0,r.yg)("p",null,"Because our SDK uses SVG files, you will need to update your metro bundler configuration accordingly:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-config",metastring:'title="metro.config"',title:'"metro.config"'},"const { getDefaultConfig } = require('metro-config');\n\nmodule.exports = (async () => {\n  const {\n    resolver: {\n      sourceExts,\n      assetExts\n    }\n  } = await getDefaultConfig();\n\n  return {\n    transformer: {\n      babelTransformerPath: require.resolve('react-native-svg-transformer'),\n      getTransformOptions: async () => ({\n        transform: {\n          experimentalImportSupport: false,\n          inlineRequires: true,\n        },\n      }),\n    },\n    resolver: {\n      assetExts: assetExts.filter(ext => ext !== 'svg'),\n      sourceExts: [...sourceExts, 'svg']\n    }\n  }\n})();\n")),(0,r.yg)("h3",{id:"android"},"Android"),(0,r.yg)("h4",{id:"permissions"},"Permissions"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"In ",(0,r.yg)("inlineCode",{parentName:"li"},"android/app/src/debug/AndroidManifest.xml")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"android/app/src/main/AndroidManifest.xml"),", under the ",(0,r.yg)("inlineCode",{parentName:"li"},"</application>")," tag, please include",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-xml"},' <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />\n <uses-permission android:name="android.permission.BLUETOOTH" />\n <uses-permission android:name="android.permission.CAMERA" />\n <uses-permission android:name="android.permission.INTERNET" />\n <uses-permission android:name="android.permission.MANAGE_OWN_CALLS" />\n <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />\n <uses-permission android:name="android.permission.RECORD_AUDIO" />\n <uses-permission android:name="android.permission.WAKE_LOCK" />\n <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />\n'))),(0,r.yg)("li",{parentName:"ul"},"Starting Android 14, specific foreground service types permissions require to be added in the manifest file: ",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-xml"},' <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />\n <uses-permission android:name="android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK" />\n <uses-permission android:name="android.permission.FOREGROUND_SERVICE_MEDIA_PROJECTION" />\n')))),(0,r.yg)("h4",{id:"services"},"Services"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"To enables the screen share feature you now need to go to your ",(0,r.yg)("inlineCode",{parentName:"p"},"MainApplication.java")," file and:"),(0,r.yg)("ol",{parentName:"li"},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"import com.oney.WebRTCModule.WebRTCModuleOptions;")," that comes from ",(0,r.yg)("inlineCode",{parentName:"p"},"react-native-webrtc")," dependency.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"WebRTCModuleOptions options = WebRTCModuleOptions.getInstance();")," instance it.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"options.enableMediaProjectionService = true;")," enable foreground service that takes care of screen-sharing feature."))))),(0,r.yg)("h4",{id:"api"},"API"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Our app use ",(0,r.yg)("inlineCode",{parentName:"li"},"react-native-orientation-locker")," dependency that uses API 33 features. Make sure that your app, in ",(0,r.yg)("inlineCode",{parentName:"li"},"android\\build.gradle"),", targets, at least, that version:",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-markdown"},"  buildscript {\n      ext {\n          compileSdkVersion = 33\n          targetSdkVersion = 33\n      }\n  }\n")))),(0,r.yg)("h3",{id:"ios"},"iOS"),(0,r.yg)("h4",{id:"permissions-1"},"Permissions"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"React Native SDK requests camera and microphone access, make sure to include the required entries for ",(0,r.yg)("inlineCode",{parentName:"li"},"NSCameraUsageDescription")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"NSMicrophoneUsageDescription"),"in your ",(0,r.yg)("inlineCode",{parentName:"li"},"Info.plist")," file."),(0,r.yg)("li",{parentName:"ul"},"React Native SDK shows and hides the status bar based on the conference state,\nyou may want to set ",(0,r.yg)("inlineCode",{parentName:"li"},"UIViewControllerBasedStatusBarAppearance")," to ",(0,r.yg)("inlineCode",{parentName:"li"},"NO")," in your\n",(0,r.yg)("inlineCode",{parentName:"li"},"Info.plist")," file."),(0,r.yg)("li",{parentName:"ul"},"For starting screen sharing React Native SDK provides the UI to present the ",(0,r.yg)("inlineCode",{parentName:"li"},"RPSystemBroadcastPickerView")," to the user. By default, the picker will display a list of all the available broadcast providers. In order to limit the picker to our particular broadcast provider, we have to set ",(0,r.yg)("inlineCode",{parentName:"li"},"preferredExtension")," to the bundle identifier of the broadcast extension. We are doing this by adding a new key named ",(0,r.yg)("inlineCode",{parentName:"li"},"RTCScreenSharingExtension")," to the app's Info.plist and setting the broadcast extension bundle identifier as the value."),(0,r.yg)("li",{parentName:"ul"},"Make sure ",(0,r.yg)("inlineCode",{parentName:"li"},"voip")," is added to ",(0,r.yg)("inlineCode",{parentName:"li"},"UIBackgroundModes"),", in the app's ",(0,r.yg)("inlineCode",{parentName:"li"},"Info.plist"),", in order to work when the app is in the background.")),(0,r.yg)("h4",{id:"build-phases"},"Build Phases"),(0,r.yg)("h5",{id:"run-script-phases"},"Run Script Phases"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"For the sounds to work, please add the following script in Xcode:",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'  SOUNDS_DIR="${PROJECT_DIR}/../node_modules/@jitsi/react-native-sdk/sounds"\n  cp $SOUNDS_DIR/* ${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/\n')))),(0,r.yg)("h2",{id:"jitsimeeting-props"},"JitsiMeeting props"),(0,r.yg)("p",null,"Our JitsiMeeting component renders the full meeting experience. This has some customizable properties:"),(0,r.yg)("h3",{id:"config"},"config"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Object")," - Overwrite different ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/jitsi/jitsi-meet/blob/master/config.js"},"config")," options."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"For example:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'<JitsiMeeting\n    config = {{\n        hideConferenceTimer: true,\n        subject: "React Native SDK",\n        customToolbarButtons: [\n            {\n                icon: "https://w7.pngwing.com/pngs/987/537/png-transparent-download-downloading-save-basic-user-interface-icon-thumbnail.png",\n                id: "btn1",\n                text: "Button one"\n            }, {\n                icon: "https://w7.pngwing.com/pngs/987/537/png-transparent-download-downloading-save-basic-user-interface-icon-thumbnail.png",\n                id: "btn2",\n                text: "Button two"\n            }\n        ]\n    }} />\n')),(0,r.yg)("h3",{id:"flags"},"flags"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Object")," - Add different feature ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/jitsi/jitsi-meet/blob/master/react/features/base/flags/constants.ts"},"flags"),"\nthat your meeting experience would like to have. "),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"For example: ")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"<JitsiMeeting \n    flags={{\n    'call-integration.enabled': true, \n    'fullscreen.enabled': false, \n    'invite.enabled': true }} />\n")),(0,r.yg)("h3",{id:"eventlisteners"},"eventListeners"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Object")," - Options that personalize your meeting experience:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"onConferenceBlurred\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function")," - Takes a function that gets triggered when ",(0,r.yg)("inlineCode",{parentName:"p"},"CONFERENCE_BLURRED")," action is dispatched, more exactly when a conference screen is out of focus, more exactly when navigation to another screen is initiated. ")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"onConferenceFocused\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function")," - Takes a function that gets triggered when ",(0,r.yg)("inlineCode",{parentName:"p"},"CONFERENCE_FOCUSED")," action is dispatched, more exactly when a conference screen is focused.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"onAudioMutedChanged\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function")," - Takes a function that gets triggered when ",(0,r.yg)("inlineCode",{parentName:"p"},"SET_AUDIO_MUTED")," action is dispatched, more exactly when audio mute state is changed.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"onConferenceJoined\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function")," - Takes a function that gets triggered when ",(0,r.yg)("inlineCode",{parentName:"p"},"CONFERENCE_JOINED")," action is dispatched, more exactly when a conference was joined.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"onConferenceLeft\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function")," - Takes a function that gets triggered when ",(0,r.yg)("inlineCode",{parentName:"p"},"CONFERENCE_LEFT")," action is dispatched, more exactly when a conference was left.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"onConferenceWillJoin\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function")," - Takes a function that gets triggered when ",(0,r.yg)("inlineCode",{parentName:"p"},"CONFERENCE_WILL_JOIN")," action is dispatched, more exactly when a conference will be joined.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"onEnterPictureInPicture\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function")," - Takes a function that gets triggered when ",(0,r.yg)("inlineCode",{parentName:"p"},"ENTER_PICTURE_IN_PICTURE")," action is dispatched, more exactly when entering picture-in-picture is initiated.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"onParticipantJoined\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function")," - Takes a function that gets triggered when ",(0,r.yg)("inlineCode",{parentName:"p"},"PARTICIPANT_JOINED")," action is dispatched, more exactly when a specific participant joined a conference.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"onReadyToClose\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function")," - Takes a function that gets triggered when ",(0,r.yg)("inlineCode",{parentName:"p"},"READY_TO_CLOSE")," action is dispatched, more exactly when one exits a conference.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"onVideoMutedChanged\n",(0,r.yg)("inlineCode",{parentName:"p"},"Function")," - Takes a function that gets triggered when ",(0,r.yg)("inlineCode",{parentName:"p"},"SET_VIDEO_MUTED")," action is dispatched, more exactly when video mute state is changed."))),(0,r.yg)("h3",{id:"room"},"room"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string")," - Name of the room where the conference takes place."),(0,r.yg)("h3",{id:"serverurl"},"serverURL"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string")," - Server where the conference should take place."),(0,r.yg)("h3",{id:"style"},"style"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Object")," - CSS your meeting experience."),(0,r.yg)("h3",{id:"token"},"token"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string")," - JWT token used for authentication."),(0,r.yg)("h3",{id:"userinfo"},"userInfo"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"avatarUrl\n",(0,r.yg)("inlineCode",{parentName:"p"},"string")," - Path to participant's avatar.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"displayName\n",(0,r.yg)("inlineCode",{parentName:"p"},"string")," - Default participant name to be displayed.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"email\n",(0,r.yg)("inlineCode",{parentName:"p"},"string")," - Default email for participant."))))}m.isMDXComponent=!0}}]);