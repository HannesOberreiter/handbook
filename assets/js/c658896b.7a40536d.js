"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5019],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,m=d["".concat(p,".").concat(g)]||d[g]||u[g]||i;return n?o.createElement(m,a(a({ref:t},s),{},{components:n})):o.createElement(m,a({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8821:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],l={id:"mobile-google-auth",title:"Setting up Google sign-in integration"},p=void 0,c={unversionedId:"dev-guide/mobile-google-auth",id:"dev-guide/mobile-google-auth",title:"Setting up Google sign-in integration",description:"- Create a Firebase project here//firebase.google.com/. You'll need a",source:"@site/docs/dev-guide/mobile-google-auth.md",sourceDirName:"dev-guide",slug:"/dev-guide/mobile-google-auth",permalink:"/handbook/docs/dev-guide/mobile-google-auth",draft:!1,editUrl:"https://github.com/jitsi/handbook/edit/master/docs/dev-guide/mobile-google-auth.md",tags:[],version:"current",lastUpdatedAt:1720102082,formattedLastUpdatedAt:"Jul 4, 2024",frontMatter:{id:"mobile-google-auth",title:"Setting up Google sign-in integration"}},s={},u=[],d={toc:u};function g(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a Firebase project here: ",(0,i.kt)("a",{parentName:"li",href:"https://firebase.google.com/"},"https://firebase.google.com/"),". You'll need a\nsigned Android build for that, that can be a debug self-signed build too, just\nretrieve the signing hash. The key hash of an already signed ap can be obtained\nas follows (on macOS): ",(0,i.kt)("inlineCode",{parentName:"li"},"keytool -list -printcert -jarfile the-app.apk")),(0,i.kt)("li",{parentName:"ul"},"Place the generated ",(0,i.kt)("inlineCode",{parentName:"li"},"google-services.json")," file in ",(0,i.kt)("inlineCode",{parentName:"li"},"android/app"),"\nfor Android and the ",(0,i.kt)("inlineCode",{parentName:"li"},"GoogleService-Info.plist")," into ",(0,i.kt)("inlineCode",{parentName:"li"},"ios/app")," for\niOS (you can stop at that step, no need for the driver and the code changes they\nsuggest in the wizard)."),(0,i.kt)("li",{parentName:"ul"},"You may want to exclude these files in YOUR GIT config (do not exclude them in\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},".gitignore")," of the application itself!)."),(0,i.kt)("li",{parentName:"ul"},"Your web client ID is auto generated during the Firebase project\ncreation. Find them in the Google Developer console\n(",(0,i.kt)("a",{parentName:"li",href:"https://console.developers.google.com/"},"https://console.developers.google.com/"),")"),(0,i.kt)("li",{parentName:"ul"},"Make sure your config reflects this ID by setting\n",(0,i.kt)("inlineCode",{parentName:"li"},"googleApiApplicationClientID")," in config.js."),(0,i.kt)("li",{parentName:"ul"},"Add your iOS client ID (the REVERSED_CLIENT_ID in the plist file) as an\napplication URL schema into ",(0,i.kt)("inlineCode",{parentName:"li"},"ios/app/src/Info.plist"),"\n(replacing placeholder)."),(0,i.kt)("li",{parentName:"ul"},"Enable YouTube API access on the developer console (see above) to enable live\nstreaming.")))}g.isMDXComponent=!0}}]);